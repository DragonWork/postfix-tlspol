# Made with ❤️ by Zuplu.
# All rights reserved.

name: 🚀 Build and Deploy Docker Images

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY_IMAGE: zupluadmin/postfix-tlspol-dev

permissions: read-all

jobs:
  test:
    name: 🧪 Unit Testing
    uses: ./.github/workflows/go-test.yaml

  label:
    name: 🏷️ Find Label
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: 🏷️ Determine version tag
        id: tag
        run: |
          LATEST_TAG="$(curl -s "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/releases/latest" | jq -r .tag_name)"
          if [ "$GITHUB_REF_TYPE" = "tag" ]; then
            VERSION_TAG="$GITHUB_REF_NAME"
          else
            VERSION_TAG="$LATEST_TAG"
          fi
          echo "Building $VERSION_TAG, whereas $LATEST_TAG is latest..."
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_OUTPUT
    outputs:
      LATEST_TAG: ${{ steps.tag.outputs.LATEST_TAG }}
      VERSION_TAG: ${{ steps.tag.outputs.VERSION_TAG }}

  build:
    name: 🚧 Build Docker Images
    needs: label
    strategy:
      matrix:
        platform: 
          - linux/amd64
          - linux/arm/v6
          - linux/arm/v7
          - linux/arm64
          - linux/386
          - linux/ppc64le
          - linux/riscv64
          - linux/s390x
    runs-on: ubuntu-latest
    steps:
      - name: 🏷️ Prepare tags
        run: |
          VERSION_TAG="${{ needs.label.outputs.VERSION_TAG }}"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          PLATFORM="$(echo "${{ matrix.platform }}" | tr '/' '-')"
          echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV

      - name: 📦 Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4

      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@4574d27a4764455b42196d70a065bc6853246a25 # pin@v3

      - name: 🛠️ Set up Docker Buildx
        uses: docker/setup-buildx-action@f7ce87c1d6bead3e36075b2ce75da1f6cc28aaca # pin@v3

      - name: 📊 Synthesize Docker metadata
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # pin@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # pin@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build platform-specific Docker image 🚧
        id: build
        uses: docker/build-push-action@ca877d9245402d1537745e0e356eab47c3520991 # pin@v6
        env:
          DOCKER_BUILD_SUMMARY: false
          DOCKER_BUILD_RECORD_UPLOAD: false
        with:
          platforms: ${{ matrix.platform }}
          context: .
          file: deployments/Dockerfile
          push: true
          sbom: false
          provenance: false
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=image,"name=${{ env.REGISTRY_IMAGE }}",push-by-digest=true,name-canonical=true,push=true

      - name: 📑 Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: 📤 Upload digest
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # pin@v4
        with:
          name: digests-${{ env.PLATFORM }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: 📦 Bundle and Deploy ✨
    needs: [ label, build ]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Download digests
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # pin@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: 🏷️ Prepare tags
        run: |
          LATEST_TAG="${{ needs.label.outputs.LATEST_TAG }}"
          VERSION_TAG="${{ needs.label.outputs.VERSION_TAG }}"
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV

      - name: 📊 Synthesize Docker metadata
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # pin@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # pin@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: ✨ Bundle and push version »${{ env.VERSION_TAG }}«
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
